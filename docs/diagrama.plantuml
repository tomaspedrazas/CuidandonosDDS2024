@startuml Diagrama Cuidandonos

class Persona{
    -nombre : String
    -apellido : String
    -direccion : Direccion
    -edad : Int
    -sexo : String
    -activo: Boolean
}

class Tramo {
    -direccionActual : Direccion
    -direccionFinal : Direccion
    -tiempoDetenido: Float

    +calcularTiempoDetenido(): Float
}

class Viaje {
    -tramos: List<Tramo>
    -cuidadoresDeseados : List <Persona>
    -cuidadoresAceptados : List <Persona>
    -transeunte: Persona
    -demoraAproximada : Float
    -notificaraEstado: Boolean
    -reaccion : IReaccion
    -estadoViaje : Estado

    +calcularDemoraAproximada(tramos: List<Tramo>, calcularDistancia: ICalcularDistancia)
    +comenzar(): void
    +finalizar(): void
    +verificarDemora(): void
}

class Direccion {
    -calle : String
    -altura : Int
    -ubicacion: Ubicacion
}

class Ubicacion {
    -latitud: float
    -longuitud: float
}

abstract class Estado{
    +comenzar(Viaje): void
    +reanudar(Viaje): void
    +detener(Viaje): void
    +verificarDemora(Viaje): void
    +notificarCuidadores(Viaje): void
    +manejarNotificaciones(Viajero) : void
}

class EnEspera {
    +comenzar(Viaje): void
}

class EnRumbo {
    +manejarNotificaciones(Viajero) : void
    +detener(Viaje): void
    +finalizar(Viaje): void
    +verificarDemora(Viaje): void
}

class EnPeligro {
    +verificarDemora(Viaje): void
    +finalizar(Viaje): void
}

class Detenido {
    +reanudar(Viaje)
    +finalizar(Viaje): void
}

class Arribado{
    +notificarCuidadores(Viaje): void
}

interface IReaccion{
    +reaccionar(Viaje) : void
}

class AlertarCuidadores{
    +reaccionar(Viaje) : void
}

class LlamarPolicia{
    +reaccionar(Viaje) : void
}

class LlamarUsuario{
    +reaccionar(Viaje) : void
}

class EsperarMinutos{
    +reaccionar(Viaje) : void
}

interface ICalcularDistancia{
    +CalcularDistancia(Direccion, Direccion) : Float
}

class CalcularDistancia{
    -api : DistanceMatrixAPI
    +calcularDistancia(Direccion, Direccion) : Float
}

class DistanceMatrixAPI{
    +calcularDistancia(Direccion, Direccion) : Float
}


Viaje "1" --> "many" Persona
Viaje "1" --> "many" Tramo

Persona --> Direccion
Tramo --> Direccion

Direccion --> Ubicacion


Viaje --> Estado
EnRumbo --|> Estado
Arribado --|> Estado
EnEspera --|> Estado
EnPeligro --|> Estado
EnRumbo ..> Detenido
EnRumbo ..> EnPeligro
Detenido ..> EnRumbo
EnEspera ..> EnRumbo
Detenido ..> Arribado
EnPeligro ..> Arribado

Viaje --> IReaccion
AlertarCuidadores ..|> IReaccion
LlamarPolicia ..|> IReaccion
LlamarUsuario ..|> IReaccion
EsperarMinutos ..|> IReaccion

Viaje --> ICalcularDistancia
CalcularDistancia ..|> ICalcularDistancia
CalcularDistancia --> DistanceMatrixAPI

ICalcularDistancia ..|> Direccion
@enduml